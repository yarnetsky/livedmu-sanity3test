"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LabelWithInput = void 0;
var react_1 = __importDefault(require("react"));
var ui_1 = require("@sanity/ui");
var LabelWithInput = function (_a) {
    var label = _a.label, onChange = _a.onChange, _b = _a.type, type = _b === void 0 ? 'text' : _b, rest = __rest(_a, ["label", "onChange", "type"]);
    var elementsMap = {
        checkbox: CustomCheckbox,
        location: Location,
        textArea: ui_1.TextArea,
        select: CustomSelect,
    };
    var onChangeMap = {
        checkbox: function (e) { return onChange(e.target.checked); },
        location: function (value) { return onChange(value); },
        number: function (e) { return onChange(parseFloat(e.target.value)); },
        select: function (e) { return onChange(e.target.value); },
    };
    var defaultOnChange = function (e) { return onChange(e.target.value); };
    var handleOnChange = onChangeMap[type] || defaultOnChange;
    var Element = elementsMap[type] || ui_1.TextInput;
    return (react_1.default.createElement(ui_1.Stack, { space: 3 },
        react_1.default.createElement("label", { htmlFor: label },
            react_1.default.createElement(ui_1.Label, { size: 2 }, label)),
        react_1.default.createElement(Element, __assign({ id: label, onChange: handleOnChange, type: type }, rest))));
};
exports.LabelWithInput = LabelWithInput;
var CustomCheckbox = function (_a) {
    var value = _a.value, rest = __rest(_a, ["value"]);
    return react_1.default.createElement(ui_1.Checkbox, __assign({ checked: !!value }, rest));
};
var Location = function (_a) {
    var onChange = _a.onChange, _b = _a.value, value = _b === void 0 ? {} : _b;
    var fields = [
        { label: 'Latitude', name: 'lat', type: 'number', step: 'any' },
        { label: 'Longitude', name: 'lng', type: 'number', step: 'any' },
        { label: 'Altitude', name: 'alt', type: 'number', step: 'any' },
    ];
    var handleInputchange = function (e) {
        var _a;
        onChange(__assign(__assign({}, (value || {})), (_a = {}, _a[e.target.name] = parseFloat(e.target.value), _a)));
    };
    return (react_1.default.createElement(ui_1.Stack, { space: 3 }, fields.map(function (_a) {
        var label = _a.label, name = _a.name, rest = __rest(_a, ["label", "name"]);
        return (react_1.default.createElement(ui_1.Inline, { key: name, space: 3 },
            react_1.default.createElement("label", { htmlFor: label },
                react_1.default.createElement(ui_1.Label, { size: 1 }, label)),
            react_1.default.createElement(ui_1.TextInput, __assign({ id: label, onChange: handleInputchange, name: name, value: value ? value[name] : '' }, rest))));
    })));
};
var CustomSelect = function (_a) {
    var options = _a.options, placeholder = _a.placeholder, value = _a.value, label = _a.label, rest = __rest(_a, ["options", "placeholder", "value", "label"]);
    return (react_1.default.createElement(ui_1.Select, __assign({ id: label }, rest),
        react_1.default.createElement("option", { value: "" }, placeholder), options === null || options === void 0 ? void 0 :
        options.map(function (option) { return (react_1.default.createElement("option", { key: option.value, value: option.value, selected: option.value === value }, option.title)); })));
};
